{"version":3,"sources":["store/types/index.ts","utils/api.tsx","store/action-creators/index.ts","store/reducers/booksReducer.ts","store/reducers/bookReducer.ts","store/reducers/index.ts","store/reducers/inputReducer.ts","store/reducers/countOfRenderReducer.ts","store/reducers/loaderReducer.ts","store/reducers/categoriesOfBooksReducer.ts","store/store.ts","components/SearchForm/SearchForm.tsx","components/Header/Header.tsx","components/Card/Card.tsx","components/Preloader/Preloader.tsx","components/Main/Main.tsx","components/BookPage/BookPage.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionTypes","booksApi","baseUrl","apiKey","this","value","fetch","method","headers","then","res","ok","json","Promise","reject","Error","status","statusText","getInputValue","amount","dispatch","type","INPUT_VALUE","payload","getBooksArr","BOOKS_ARRAY","multiplyCount","COUNT_OF_RENDER","changeStatus","LOADER","changeCategories","CATEGORIES","getBookArr","BOOK_PAGE","initialState","rootReducer","combineReducers","input","state","action","booksArr","count","loader","categories","book","store","createStore","reducer","applyMiddleware","thunk","SearchForm","getBooks","useDispatch","bindActionCreators","actionCreators","useSelector","className","onSubmit","e","preventDefault","placeholder","onChange","target","Header","Card","card","to","onClick","src","volumeInfo","imageLinks","thumbnail","alt","title","authors","Preloader","Main","length","totalItems","items","slice","map","item","Math","random","BookPage","navigate","useNavigate","description","App","books","path","element","data","sort","a","b","publishedDate","catch","err","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.13dededd.chunk.js","sourcesContent":["export enum ActionTypes {\n    INPUT_VALUE = 'input',\n    BOOKS_ARRAY = 'books',\n    COUNT_OF_RENDER = 'count',\n    LOADER = 'loader',\n    CATEGORIES = 'categories',\n    BOOK_PAGE = 'book',\n}","class Api {\n    baseUrl: string;\n    apiKey: string;\n    constructor(baseUrl: string, apiKey: string) {\n        this.baseUrl = baseUrl;\n        this.apiKey = apiKey;\n    }\n\n    getBooks(value: String) {\n        return fetch(`${this.baseUrl}`+value+`&maxResults=40&key=${this.apiKey}`, {\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        }).then((res) => {\n            return res.ok\n                ? res.json()\n                : Promise.reject(\n                    new Error(`Ошибка ${res.status} : ${res.statusText}`)\n                );\n        });\n    }\n}\n\nlet baseUrl = \"https://www.googleapis.com/books/v1/volumes?q=\";\nlet apiKey = \"AIzaSyBDQCUnMeuqv_QxXuWhk3oXJQ0ujc-bTuY\";\n\nconst booksApi = new Api(baseUrl, apiKey);\nexport default booksApi;","import { ActionTypes } from \"../types\";\nimport { Dispatch } from \"redux\";\nimport { ActionInput } from \"../actions/index\";\nimport { ActionBook } from \"../actions/index\";\nimport { ActionCount } from \"../actions/index\";\nimport { ActionLoader } from \"../actions/index\";\nimport { ActionCategories } from \"../actions/index\";\nimport { ActionBookPage } from \"../actions/index\";\n\n\nexport const getInputValue = (amount: String) => {\n    return (dispatch: Dispatch<ActionInput>) => {\n        dispatch({\n            type: ActionTypes.INPUT_VALUE,\n            payload: amount\n        })\n    }\n}\n\nexport const getBooksArr = (amount: any) => {\n    return (dispatch: Dispatch<ActionBook>) => {\n        dispatch({\n            type: ActionTypes.BOOKS_ARRAY,\n            payload: amount\n        })\n    }\n}\n\nexport const multiplyCount = (amount: Number) => {\n    return (dispatch: Dispatch<ActionCount>) => {\n        dispatch({\n            type: ActionTypes.COUNT_OF_RENDER,\n            payload: amount\n        })\n    }\n}\n\nexport const changeStatus = (amount: Boolean) => {\n    return (dispatch: Dispatch<ActionLoader>) => {\n        dispatch({\n            type: ActionTypes.LOADER,\n            payload: amount\n        })\n    }\n}\n\nexport const changeCategories = (amount: String) => {\n    return (dispatch: Dispatch<ActionCategories>) => {\n        dispatch({\n            type: ActionTypes.CATEGORIES,\n            payload: amount\n        })\n    }\n}\n\nexport const getBookArr = (amount: any) => {\n    return (dispatch: Dispatch<ActionBookPage>) => {\n        dispatch({\n            type: ActionTypes.BOOK_PAGE,\n            payload: amount\n        })\n    }\n}","import { ActionBook } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = [{}]\n\nexport const booksReducer = (state = initialState, action: ActionBook) => {\n    switch (action.type) {\n        case ActionTypes.BOOKS_ARRAY:\n            return action.payload\n        default:\n            return state\n    }\n}","import { ActionBookPage } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = [{}]\n\nexport const bookReducer = (state = initialState, action: ActionBookPage) => {\n    switch (action.type) {\n        case ActionTypes.BOOK_PAGE:\n            return action.payload\n        default:\n            return state\n    }\n}","import { combineReducers } from \"redux\";\nimport { inputReducer } from './inputReducer';\nimport { booksReducer } from './booksReducer';\nimport { countReducer } from './countOfRenderReducer';\nimport { loaderReducer } from './loaderReducer';\nimport { categoriesReducer } from './categoriesOfBooksReducer';\nimport { bookReducer } from './bookReducer';\n\n\nexport const rootReducer = combineReducers({\n    input: inputReducer,\n    booksArr: booksReducer,\n    count: countReducer,\n    loader: loaderReducer,\n    categories: categoriesReducer,\n    book: bookReducer,\n})\n\nexport default rootReducer;\n\nexport type  State = ReturnType<typeof rootReducer>;","import { ActionInput } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = ''\n\nexport const inputReducer = (state = initialState, action: ActionInput) => {\n    switch (action.type) {\n        case ActionTypes.INPUT_VALUE:\n            return action.payload\n        default:\n            return state\n    }\n}","import { ActionCount } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = 30\n\nexport const countReducer = (state = initialState, action: ActionCount) => {\n    switch (action.type) {\n        case ActionTypes.COUNT_OF_RENDER:\n            return state + state\n        default:\n            return state\n    }\n}","import { ActionLoader } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = false\n\nexport const loaderReducer = (state = initialState, action: ActionLoader) => {\n    switch (action.type) {\n        case ActionTypes.LOADER:\n            return action.payload\n        default:\n            return state\n    }\n}","import { ActionCategories } from '../actions/index';\nimport { ActionTypes } from '../types/index';\n\nconst initialState = 'all'\n\nexport const categoriesReducer = (state = initialState, action: ActionCategories) => {\n    switch (action.type) {\n        case ActionTypes.CATEGORIES:\n            return state\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers/index';\nimport thunk from 'redux-thunk';\n\nexport const store = createStore(\n    reducer,\n    {},\n    applyMiddleware(thunk)\n)","import './SearchForm.css';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators, State } from '../../store';\n\ninterface HeaderProps {\n    getBooks: Function,\n}\n\nfunction SearchForm({ getBooks }: HeaderProps) {\n    const dispatch = useDispatch();\n    const { getInputValue } = bindActionCreators(actionCreators, dispatch);\n    const { changeStatus } = bindActionCreators(actionCreators, dispatch);\n    const input = useSelector((state: State) => state.input);\n\n    const handleInputValue = (e: any) => {\n        getInputValue(e.target.value);\n    }\n\n    const handleSubmitForm = (e: React.FormEvent) => {\n        e.preventDefault();\n        changeStatus(true)\n        getBooks(input);\n    }\n\n    return (\n        <form className='form' onSubmit={handleSubmitForm}>\n            <input className=\"form__input\" placeholder=\"Книги\" onChange={handleInputValue} />\n            <input className=\"form__button\" type=\"submit\" value=\"Поиск\" />\n            \n            {/* <div className='form__column'>\n                <div className='form__box'>\n                    <p className='form__text'>Categories</p>\n                    <select className='form__select' onChange={handleChangeCategories} >\n                        <option>all</option>\n                        <option>art</option>\n                        <option>biography</option>\n                        <option>computers</option>\n                        <option>history</option>\n                        <option>medical</option>\n                        <option>poetry</option>\n                    </select>\n                </div>\n                <div className='form__box'>\n                    <p className='form__text'>Sorting by</p>\n                    <select className='form__select'>\n                        <option>relevance</option>\n                        <option>newest</option>\n                    </select>\n                </div>\n            </div> */}\n        </form>\n    );\n}\n\nexport default SearchForm;","import './Header.css';\nimport SearchForm from '../SearchForm/SearchForm';\n\ninterface HeaderProps {\n    getBooks: Function,\n}\n\nfunction Header({ getBooks }: HeaderProps) {\n    return (\n        <header className='header'>\n            <div className='header__conteiner'>\n                <h1 className='header__title'>Найди свою книгу</h1>\n                <p className='header__subtitle'>тестовое задание</p>\n                <SearchForm getBooks={getBooks} />\n            </div>\n        </header>\n    );\n}\n\nexport default Header;","import { useDispatch } from 'react-redux';\nimport { actionCreators } from '../../store';\nimport { bindActionCreators } from 'redux';\nimport { Link } from 'react-router-dom';\nimport './Card.css';\n\ninterface CardProps {\n    card: any\n}\n\nfunction Card({ card }: CardProps) {\n    const dispatch = useDispatch();\n    const { getBookArr } = bindActionCreators(actionCreators, dispatch);\n\n    return (\n        <Link\n            to='/book'\n            onClick={() => { getBookArr(card) }}\n        >\n            <section className='card'>\n                <img className='card__img' src={card.volumeInfo.imageLinks.thumbnail} alt='book' />\n                <p className='card__category card-text'>{card.volumeInfo.categories}</p>\n                <h3 className='card__name card-text'>{card.volumeInfo.title}</h3>\n                <p className='card__autor card-text'>{card.volumeInfo.authors}</p>\n            </section>\n        </Link>\n    );\n}\n\nexport default Card;","import './Preloader.css';\n\ninterface PreloaderProps {\n    loader: Boolean\n}\n\nfunction Preloader({ loader }: PreloaderProps) {\n    return (\n        <section className={loader ? 'lds-roller' : 'lds-roller-hide'}>\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\n        </section>\n    );\n}\n\nexport default Preloader;","import './Main.css';\nimport Card from '../Card/Card';\nimport Preloader from '../Preloader/Preloader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators, State } from '../../store';\n\ninterface MainProps {\n    booksArr: {\n        items: [],\n        kind: String,\n        totalItems: Number,\n        length: any,\n    }\n}\n\nfunction Main({ booksArr }: MainProps) {\n    const dispatch = useDispatch();\n    const { multiplyCount } = bindActionCreators(actionCreators, dispatch);\n    const count = useSelector((state: State) => state.count);\n    const loader = useSelector((state: State) => state.loader);\n\n    return (\n\n        <section className='main'>\n            {loader ?\n                <Preloader loader={loader} />\n                : null\n            }\n\n            {\n                booksArr.length === 1 ?\n                    null\n                    :\n                    <><p className='main__counterc'>Всего книг в базе {booksArr.totalItems}</p><div className='main__content'>\n                        {booksArr.items\n                            .slice(0, count)\n                            .map((item) => (\n                                <Card\n                                    key={Math.random()}\n                                    card={item} />\n                            ))}\n                    </div><button className='main__button' onClick={() => { multiplyCount(30); }}>Еще</button></>\n            }\n        </section>\n    );\n}\n\nexport default Main;","import { State } from '../../store';\nimport { useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router';\nimport './BookPage.css';\n\nconst BookPage = () => {\n    const book = useSelector((state: State) => state.book);\n    let navigate = useNavigate();\n\n    return (\n        <section className='bookPage'>\n            <div className='bookPage__conteiner'>\n                <div className='bookPage__content'>\n                    <div className='bookPage__box'>\n                        <p className='bookPage__category card-text'>{book.volumeInfo.categories}</p>\n                        <h3 className='bookPage__name card-text'>{book.volumeInfo.title}</h3>\n                        <p className='bookPage__autor card-text'>{book.volumeInfo.authors}</p>\n                        <p className='bookPage__description'><img className='bookPage__img' src={book.volumeInfo.imageLinks.thumbnail} alt='book' />{book.volumeInfo.description}</p>\n                    </div>\n                </div>\n                <button className='bookPage__button' onClick={() => navigate(-1)}>Назад</button>\n            </div>\n        </section>\n    );\n}\n\nexport default BookPage;","import './App.css';\nimport booksApi from '../../utils/api';\nimport Header from '../Header/Header';\nimport Main from '../Main/Main';\nimport BookPage from '../BookPage/BookPage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators, State } from '../../store';\nimport { Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { getBooksArr } = bindActionCreators(actionCreators, dispatch);\n  const { changeStatus } = bindActionCreators(actionCreators, dispatch);\n  const books = useSelector((state: State) => state.booksArr);\n\n  const getBooks = (data: String) => {\n    booksApi.getBooks(data)\n      .then((res) => {\n        let newesBook = res.items;\n      let newad = newesBook.sort(function(a: { volumeInfo: { publishedDate: number; }; }, b: { volumeInfo: { publishedDate: number; }; }){\n          return a.volumeInfo.publishedDate - b.volumeInfo.publishedDate;\n      })\n        // console.log(newesBook.forEach((item: { volumeInfo: { publishedDate: any; }; }) => console.log(item.volumeInfo.publishedDate)), 'res')\n        // let booksArtArr = res.items.filter((item: any) => item.volumeInfo.categories.includes(\"Juvenile Fiction\"));\n        // console.log(booksArtArr, 'art')\n        changeStatus(false);\n        getBooksArr(res);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  return (\n    <div className=\"app\">\n      <Routes>\n        <Route path='/' element={<><Header getBooks={getBooks} /><Main booksArr={books} /></>}>\n        </Route>\n        <Route path=\"/book\" element={<BookPage />} />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename=\"/test-task\">\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}